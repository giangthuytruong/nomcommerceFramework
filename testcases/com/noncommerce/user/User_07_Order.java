package com.noncommerce.user;

import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import baseObject.CheckoutPageObject;
import baseObject.CompareProductObject;
import baseObject.HomePageObject;
import baseObject.MyAccountObject;
import baseObject.OrderPageObject;
import baseObject.PageGeneratorManager;
import baseObject.RegisterPageObject;
import baseObject.ShoppingCartObject;
import baseObject.WishlistPageObject;
import basePage.BaseTest;

public class User_07_Order extends BaseTest {
	private WebDriver driver;
	private HomePageObject homepage;
	private RegisterPageObject registerpage;
	private ShoppingCartObject shoppingcartpage;
	private MyAccountObject myaccountpage;
	private OrderPageObject orderpage;
	private CheckoutPageObject checkoutpage;
	private String firstName, lastName, name, password, productName, processor, RAM, HDD, OS, software1, software2, software3, productPrice, processorNew, RAMNew, productNameNew, giftWrapping;
	private String address1, city, country, phone, stateZip, orderNumber, productNameNew1, cardNumber, expiredMonth, expiredYear, cardCode, newAddress;
	@Parameters("browser")
	@BeforeClass
	public void beforeClass(String browserName) {
		driver= getBrowserDriver(browserName);
		firstName= "Steve";
		lastName="Job";
		name=firstName+" "+lastName;
		password="123123";
		productName="Build your own computer";
		processor="2.2 GHz Intel Pentium Dual-Core E2200";
		RAM="2 GB";
		HDD="320 GB";
		OS="Vista Home [+$50.00]";
		software1="Microsoft Office [+$50.00]";
		software2="Acrobat Reader [+$10.00]";
		software3="Total Commander [+$5.00]";
		giftWrapping="No";
		productNameNew="Apple MacBook Pro 13-inch";
		productNameNew1="HTC One M8 Android L 5.0 Lollipop";
		address1="22 lang ha";
		city="Hanoi";
		country="Argentina";
		phone="0922222222";
		stateZip="10000";
		cardNumber="4456530000001021";
		expiredMonth="12";
		expiredYear="2022";
		cardCode="123";
		newAddress="111 Lang Ha";
		homepage= PageGeneratorManager.openHomePage(driver);
		registerpage=(RegisterPageObject) homepage.openPageAtHeaderByName(driver, "ico-register");
		registerpage.sendKeyToFirstname(firstName);
		registerpage.sendKeyToLastname(lastName);
		registerpage.sendKeyToEmail(registerpage.email);
		registerpage.sendKeyToPassword(password);
		registerpage.sendKeyToConfirmationPassword(password);
		registerpage.clickToRegisterButton();
		Assert.assertEquals(registerpage.getRegistrationResultMessage(), "Your registration completed");
		homepage=registerpage.openHomepage(driver);
		homepage.clickToProduct(productName);
	}
	@Test
	public void TC_01_AddProductToCart() {
		Assert.assertEquals(homepage.getQuantity(driver), "You have no items in your shopping cart. ");
		homepage.selectProcessor(processor);
		homepage.selectRamByText(RAM);
		homepage.chooseHDDCheckbox(HDD);
		homepage.chooseOSCheckbox(OS);
		homepage.tickSoftware(software1);
		homepage.tickSoftware(software2);
		homepage.tickSoftware(software3);
		productPrice=homepage.getProductPrice();
		homepage.clickToButton("Add to cart");
		Assert.assertEquals(homepage.notificationSuccessText(), "The product has been added to your shopping cart");
		homepage.closeNotification();
		Assert.assertEquals(homepage.getQuantity(driver), "There are 1 item(s) in your cart.");
		Assert.assertEquals(homepage.getProductShoppingCart(driver), productName);
		Assert.assertTrue(homepage.getProductTotalPrice(driver).contains(productPrice));
	}
	@Test
	public void TC_02_EditProductShoppingCart() {
		shoppingcartpage=(ShoppingCartObject) homepage.openPageAtHeaderByName(driver, "ico-cart");
		shoppingcartpage.clickToEditButton();
		processorNew="2.2 GHz Intel Pentium Dual-Core E2200";
		RAMNew="4GB [+$20.00]";
		homepage.selectProcessor(processorNew);
		homepage.selectRamByText(RAMNew);
		homepage.inputQuantity("2");
		Assert.assertEquals(homepage.getProductPrice(), "$1,300.00");
		Assert.assertEquals(homepage.notificationSuccessText(), "The product has been added to your shopping cart");
		homepage.closeNotification();
		shoppingcartpage=(ShoppingCartObject) homepage.openPageAtHeaderByName(driver, "ico-cart");
		Assert.assertTrue(shoppingcartpage.getProductAttribute().contains(processorNew));
		Assert.assertTrue(shoppingcartpage.getProductAttribute().contains(RAMNew));
		Assert.assertTrue(shoppingcartpage.getProductAttribute().contains(HDD));
		Assert.assertTrue(shoppingcartpage.getProductAttribute().contains(OS));
		Assert.assertTrue(shoppingcartpage.getProductAttribute().contains(software1));
		Assert.assertTrue(shoppingcartpage.getProductAttribute().contains(software2));
		Assert.assertTrue(shoppingcartpage.getProductAttribute().contains(software3));
		shoppingcartpage.inputQuantity("2");
		shoppingcartpage.clickToShoppingCartButton("Update shopping cart");
		Assert.assertEquals(shoppingcartpage.getProductPrice("product-unit-price"), "$1,300.00");
		Assert.assertEquals(shoppingcartpage.getQuantity(), "2");
		Assert.assertEquals(shoppingcartpage.getProductPrice("product-subtotal"), "$2,600.00");
	}
	@Test
	public void TC_03_RemoveFromCart() {
		shoppingcartpage=(ShoppingCartObject) homepage.openPageAtHeaderByName(driver, "ico-cart");
		shoppingcartpage.clickToRemoveButton();
		Assert.assertEquals(shoppingcartpage.getNoDataMessage(), "Your Shopping Cart is empty!");
		Assert.assertEquals(shoppingcartpage.getQuantity(driver), "You have no items in your shopping cart. ");
	}
	@Test
	public void TC_04_UpdateShoppingCart() {
		homepage=shoppingcartpage.openHomepage(driver);
		homepage.clickToProduct(productNameNew);
		homepage.clickToButton("Add to cart");
		Assert.assertEquals(homepage.notificationSuccessText(), "The product has been added to your shopping cart");
		homepage.closeNotification();
		Assert.assertEquals(homepage.getQuantity(driver), "There are 2 item(s) in your cart.");
		Assert.assertEquals(homepage.getProductShoppingCart(driver), productNameNew);
		Assert.assertTrue(homepage.getProductTotalPrice(driver).contains("$3,600.00"));
		shoppingcartpage=(ShoppingCartObject) homepage.openPageAtHeaderByName(driver, "ico-cart");
		Assert.assertEquals(shoppingcartpage.getQuantity(), "2");
		Assert.assertEquals(shoppingcartpage.getProductPrice("product-subtotal"), "$3,600.00");
		shoppingcartpage.inputQuantity("5");
		shoppingcartpage.clickToShoppingCartButton("Update shopping cart");
		Assert.assertEquals(shoppingcartpage.getQuantity(), "5");
		Assert.assertEquals(shoppingcartpage.getProductPrice("product-subtotal"), "$9,000.00");
	}
	@Test
	public void TC_05_Checkout_Order() {
		shoppingcartpage.selectGiftWrapping(giftWrapping);
		shoppingcartpage.clickToShoppingCartButton("Estimate shipping");
		shoppingcartpage.selectAddress("CountryId", "Argentina");
		shoppingcartpage.inputZipPostalCode("10000");
		shoppingcartpage.chooseShippingMethod("Next Day Air");
		Assert.assertEquals(shoppingcartpage.getShippingPrice("Next Day Air"), "$0.00");
		shoppingcartpage.clickToShoppingCartButton("Apply");
		Assert.assertEquals(shoppingcartpage.getSubTotalPrice("order-subtotal"), "$9,000.00");
		Assert.assertEquals(shoppingcartpage.getShippingMethod(), "(Next Day Air)");
		Assert.assertEquals(shoppingcartpage.getSubTotalPrice("shipping-cost"), "$0.00");
		Assert.assertEquals(shoppingcartpage.getSubTotalPrice("order-total"), "$9,000.00");
		shoppingcartpage.aggreeToTermOfService();
		checkoutpage= shoppingcartpage.clickToCheckoutButton();
		Assert.assertEquals(checkoutpage.getTextboxValue("BillingNewAddress_FirstName"), firstName);
		Assert.assertEquals(checkoutpage.getTextboxValue("BillingNewAddress_LastName"), lastName);
		Assert.assertEquals(checkoutpage.getTextboxValue("BillingNewAddress_Email"), registerpage.email);
		checkoutpage.selectDropDown("BillingNewAddress_CountryId", "Argentina");
		checkoutpage.selectDropDown("BillingNewAddress_StateProvinceId", "Other");
		checkoutpage.inputTextbox("BillingNewAddress_City", "Hanoi");
		checkoutpage.inputTextbox("BillingNewAddress_Address1", "123 Totenham");
		checkoutpage.inputTextbox("BillingNewAddress_ZipPostalCode", "10000");
		checkoutpage.inputTextbox("BillingNewAddress_PhoneNumber", "0986222253");
		checkoutpage.clickToContinueButton("Billing.save()");
		checkoutpage.chooseMethod("Next Day Air ($0.00)");
		checkoutpage.clickToContinueButton("ShippingMethod.save()");
		checkoutpage.chooseMethod("Check / Money Order");
		checkoutpage.clickToContinueButton("PaymentMethod.save()");
		Assert.assertTrue(checkoutpage.getPaymentInfor().contains("New York, NY 10001 USA"));
		checkoutpage.clickToContinueButton("PaymentInfo.save()");
		Assert.assertEquals(checkoutpage.getInfoText("billing-info", "name"), name);
		Assert.assertEquals(checkoutpage.getInfoText("billing-info", "email"), registerpage.email);
		Assert.assertEquals(checkoutpage.getInfoText("billing-info", "phone"), phone);
		Assert.assertEquals(checkoutpage.getInfoText("billing-info", "address1"), address1);
		Assert.assertEquals(checkoutpage.getInfoText("billing-info", "city-state-zip"), city+stateZip);
		Assert.assertEquals(checkoutpage.getInfoText("billing-info", "country"), country);
		Assert.assertEquals(checkoutpage.getInfoText("shipping-info", "name"), name);
		Assert.assertEquals(checkoutpage.getInfoText("shipping-info", "email"), registerpage.email);
		Assert.assertEquals(checkoutpage.getInfoText("shipping-info", "phone"), phone);
		Assert.assertEquals(checkoutpage.getInfoText("shipping-info", "address1"), address1);
		Assert.assertEquals(checkoutpage.getInfoText("shipping-info", "city-state-zip"), city+stateZip);
		Assert.assertEquals(checkoutpage.getInfoText("shipping-info", "country"), country);
		Assert.assertEquals(checkoutpage.getMethodText("shipping-method"), "Next Day Air");
		Assert.assertEquals(checkoutpage.getPaymentInfor(), "Check / Money Order");
		Assert.assertEquals(checkoutpage.getProductName(), productNameNew);
		Assert.assertEquals(checkoutpage.getTotalPrice("quantity"), "5");
		Assert.assertEquals(checkoutpage.getTotalPrice("subtotal"), "$9,000.00");
		Assert.assertEquals(checkoutpage.getGiftWrapping(), "No");
		Assert.assertEquals(checkoutpage.getSubTotalPrice(), "$9,000.00");
		Assert.assertEquals(checkoutpage.getShippingPrice(), "$0.00");
		Assert.assertEquals(checkoutpage.getTotalPrice(), "$9,000.00");
		checkoutpage.clickToContinueButton("ConfirmOrder.save()");
		Assert.assertEquals(checkoutpage.getSuccessfulMessage(), "Your order has been successfully processed!");
		orderNumber=checkoutpage.getOrderNumber();
		homepage=checkoutpage.clickToContinueCompleteOrder();
		myaccountpage=(MyAccountObject) homepage.openPageAtHeaderByName(driver, "ico-account");
		orderpage=(OrderPageObject) myaccountpage.openPageAtMyAccountByName(driver, "customer-orders inactive");
		Assert.assertTrue(orderpage.getOrderNumber().contains(orderNumber));
		orderpage.clickToDetail("Order Number:"+orderNumber);
		Assert.assertTrue(orderpage.getOrderNumberInfor().contains(orderNumber));
		Assert.assertEquals(orderpage.getOrderTotalPrice(), "$9,000.00");
		Assert.assertEquals(orderpage.getBillingAddressName(), name);
		Assert.assertEquals(orderpage.getBillingAddressEmail(), registerpage.email);
		Assert.assertEquals(orderpage.getBillingAddressPhoneNumber(), phone);
		Assert.assertEquals(orderpage.getBillingAddressAddress1(), address1);
		Assert.assertEquals(orderpage.getBillingAddressCityStateZip(), city+stateZip);
		Assert.assertEquals(orderpage.getBillingAddressCountry(), country);
		Assert.assertEquals(orderpage.getShippingAdressName(), name);
		Assert.assertEquals(orderpage.getShippingEmail(), registerpage.email);
		Assert.assertEquals(orderpage.getShippingPhone(), phone);
		Assert.assertEquals(orderpage.getShippingAddressAddress1(), address1);
		Assert.assertEquals(orderpage.getShippingAddressCityStateZip(), city+stateZip);
		Assert.assertEquals(orderpage.getShippingAddressCountry(), country);
		Assert.assertEquals(orderpage.getShippingMethod(), "Next Day Air");
		Assert.assertEquals(orderpage.getProductName(), productNameNew);
		Assert.assertEquals(orderpage.getQuantity(), "5");
		Assert.assertEquals(orderpage.getTotalPrice(), "$9,000.00");
		Assert.assertEquals(orderpage.getGiftWrapping(), "No");
		Assert.assertEquals(orderpage.getSubTotalPrice(), "$9,000.00");
		Assert.assertEquals(orderpage.getShippingPrice(), "$0.00");
		Assert.assertEquals(orderpage.getTotalPrice(), "$9,000.00");
	}
	@Test
	public void TC_06_PaymentMethod() {
		homepage=orderpage.openHomepage(driver);
		homepage.clickToProduct(productNameNew1);
		homepage.clickToButton("Add to cart");
		Assert.assertEquals(homepage.notificationSuccessText(), "The product has been added to your shopping cart");
		homepage.closeNotification();
		shoppingcartpage=(ShoppingCartObject) homepage.openPageAtHeaderByName(driver, "ico-cart");
		Assert.assertEquals(shoppingcartpage.getQuantity(), "1");
		Assert.assertEquals(shoppingcartpage.getProductTotalPrice(), " $245.00 ");
		shoppingcartpage.selectGiftWrapping(giftWrapping);
		shoppingcartpage.clickToEstimateShipping();
		shoppingcartpage.selectCountry("Argentina");
		shoppingcartpage.inputZipPostalCode("10000");
		shoppingcartpage.chooseShippingMethod("Next Day Air");
		Assert.assertEquals(shoppingcartpage.getShippingPrice(), "$0.00");
		shoppingcartpage.clickToApplyShippingButton();
		Assert.assertEquals(shoppingcartpage.getSubTotalPrice(), "$245.00");
		Assert.assertEquals(shoppingcartpage.getShippingMethod(), "(Next Day Air)");
		Assert.assertEquals(shoppingcartpage.getShippingTotalPrice(), "$0.00");
		Assert.assertEquals(shoppingcartpage.getTotalPrice(), "$245.00");
		shoppingcartpage.aggreeToTermOfService();
		checkoutpage= shoppingcartpage.clickToCheckoutButton();
		Assert.assertEquals(checkoutpage.getFirstName(), firstName);
		Assert.assertEquals(checkoutpage.getLastName(), lastName);
		Assert.assertEquals(checkoutpage.getEmail(), registerpage.email);
		checkoutpage.selectCountry(country);
		checkoutpage.selectProvince("Other");
		checkoutpage.inputCity(city);
		checkoutpage.inputAddress1(address1);
		checkoutpage.inputZipPostalCode(stateZip);
		checkoutpage.inputPhoneNumber(phone);
		checkoutpage.clickToContinueButton("Billing.save()");
		checkoutpage.chooseShippingMethod("Next Day Air ($0.00)");
		checkoutpage.clickToContinueButton("ShippingMethod.save()");
		checkoutpage.choosePaymentMethod("Credit Card");
		checkoutpage.clickToContinueButton("PaymentMethod.save()");
		checkoutpage.selectCreditCard("Visa");
		checkoutpage.inputCardHolderName(name);
		checkoutpage.inputCardNumber(cardNumber);
		checkoutpage.selectExpiredMonth(expiredMonth);
		checkoutpage.selectExpiredYear(expiredYear);
		checkoutpage.inputCardCode(cardCode);
		checkoutpage.clickToContinueButton("PaymentInfo.save()");
		Assert.assertEquals(checkoutpage.getBillingAddressName(), name);
		Assert.assertEquals(checkoutpage.getBillingAddressEmail(), registerpage.email);
		Assert.assertEquals(checkoutpage.getBillingAddressPhoneNumber(), phone);
		Assert.assertEquals(checkoutpage.getBillingAddressAddress1(), address1);
		Assert.assertEquals(checkoutpage.getBillingAddressCityStateZip(), city+stateZip);
		Assert.assertEquals(checkoutpage.getBillingAddressCountry(), country);
		Assert.assertEquals(checkoutpage.getShippingName(), name);
		Assert.assertEquals(checkoutpage.getShippingEmail(), registerpage.email);
		Assert.assertEquals(checkoutpage.getShippingPhone(), phone);
		Assert.assertEquals(checkoutpage.getShippingAddressAddress1(), address1);
		Assert.assertEquals(checkoutpage.getShippingAddressCityStateZip(), city+stateZip);
		Assert.assertEquals(checkoutpage.getShippingAddressCountry(), country);
		Assert.assertEquals(checkoutpage.getShippingMethod(), "Next Day Air");
		Assert.assertEquals(checkoutpage.getPaymentMethod(), "Credit Card");
		Assert.assertEquals(checkoutpage.getProductName(), productNameNew);
		Assert.assertEquals(checkoutpage.getQuantity(), "1");
		Assert.assertEquals(checkoutpage.getTotalPrice(), "$245.00");
		Assert.assertEquals(checkoutpage.getGiftWrapping(), "No");
		Assert.assertEquals(checkoutpage.getSubTotalPrice(), "$245.00");
		Assert.assertEquals(checkoutpage.getShippingPrice(), "$0.00");
		Assert.assertEquals(checkoutpage.getTotalPrice(), "$245.00");
		checkoutpage.clickToContinueButton("ConfirmOrder.save()");
		Assert.assertEquals(checkoutpage.getSuccessfulMessage(), "Your order has been successfully processed!");
		orderNumber=checkoutpage.getOrderNumber();
		homepage=checkoutpage.clickToContinueCompleteOrder();
		myaccountpage=(MyAccountObject) homepage.openPageAtHeaderByName(driver, "ico-account");
		orderpage=(OrderPageObject) myaccountpage.openPageAtMyAccountByName(driver, "customer-orders inactive");
		Assert.assertTrue(orderpage.getOrderNumber().contains(orderNumber));
		orderpage.clickToDetail("Order Number:"+orderNumber);
		Assert.assertTrue(orderpage.getOrderNumberInfor().contains(orderNumber));
		Assert.assertEquals(orderpage.getOrderTotalPrice(), "$245.00");
		Assert.assertEquals(orderpage.getBillingAddressName(), name);
		Assert.assertEquals(orderpage.getBillingAddressEmail(), registerpage.email);
		Assert.assertEquals(orderpage.getBillingAddressPhoneNumber(), phone);
		Assert.assertEquals(orderpage.getBillingAddressAddress1(), address1);
		Assert.assertEquals(orderpage.getBillingAddressCityStateZip(), city+stateZip);
		Assert.assertEquals(orderpage.getBillingAddressCountry(), country);
		Assert.assertEquals(orderpage.getShippingAdressName(), name);
		Assert.assertEquals(orderpage.getShippingEmail(), registerpage.email);
		Assert.assertEquals(orderpage.getShippingPhone(), phone);
		Assert.assertEquals(orderpage.getShippingAddressAddress1(), address1);
		Assert.assertEquals(orderpage.getShippingAddressCityStateZip(), city+stateZip);
		Assert.assertEquals(orderpage.getShippingAddressCountry(), country);
		Assert.assertEquals(orderpage.getShippingMethod(), "Next Day Air");
		Assert.assertEquals(orderpage.getProductName(), productNameNew);
		Assert.assertEquals(orderpage.getQuantity(), "1");
		Assert.assertEquals(orderpage.getTotalPrice(), "$245.00");
		Assert.assertEquals(orderpage.getGiftWrapping(), "No");
		Assert.assertEquals(orderpage.getSubTotalPrice(), "$245.00");
		Assert.assertEquals(orderpage.getShippingPrice(), "$0.00");
		Assert.assertEquals(orderpage.getTotalPrice(), "$245.00");
	}
	@Test
	public void TC_07_ReOrder() {
		shoppingcartpage=orderpage.clickToReorder();
		shoppingcartpage.inputQuantity("5");
		shoppingcartpage.clickToUpdateShoppingCart();
		Assert.assertEquals(shoppingcartpage.getProductTotalPrice(), "$1,225.00");
		Assert.assertEquals(shoppingcartpage.getSubTotalPrice(),  "$1,225.00");
		Assert.assertEquals(shoppingcartpage.getShippingPrice(), "$0.00");
		Assert.assertEquals(shoppingcartpage.getTotalPrice(), "$1,225.00");
		shoppingcartpage.aggreeToTermOfService();
		checkoutpage=shoppingcartpage.clickToCheckoutButton();
		checkoutpage.selectBillingAddress("New Address");
		checkoutpage.inputFirstName(firstName);
		checkoutpage.inputLastName(lastName);
		checkoutpage.inputEmail(registerpage.email);
		checkoutpage.selectCountry(country);
		checkoutpage.inputCity(city);
		checkoutpage.inputAddress1(newAddress);
		checkoutpage.inputZipPostalCode(stateZip);
		checkoutpage.inputPhoneNumber(phone);
		checkoutpage.clickToContinueButton("Billing.save()");
		checkoutpage.chooseShippingMethod("2nd Day Air ($0.00)");
		checkoutpage.clickToContinueButton("ShippingMethod.save()");
		checkoutpage.clickToContinueButton("Check / Money Order");
		checkoutpage.clickToContinueButton("PaymentMethod.save()");
		Assert.assertTrue(checkoutpage.getPaymentInfor().contains("New York, NY 10001 "));
		checkoutpage.clickToContinueButton("PaymentInfo.save()");
		Assert.assertEquals(checkoutpage.getBillingAddressName(), name);
		Assert.assertEquals(checkoutpage.getBillingAddressEmail(), registerpage.email);
		Assert.assertEquals(checkoutpage.getBillingAddressPhoneNumber(), phone);
		Assert.assertEquals(checkoutpage.getBillingAddressAddress1(), newAddress);
		Assert.assertEquals(checkoutpage.getBillingAddressCityStateZip(), city+stateZip);
		Assert.assertEquals(checkoutpage.getBillingAddressCountry(), country);
		Assert.assertEquals(checkoutpage.getShippingName(), name);
		Assert.assertEquals(checkoutpage.getShippingEmail(), registerpage.email);
		Assert.assertEquals(checkoutpage.getShippingPhone(), phone);
		Assert.assertEquals(checkoutpage.getShippingAddressAddress1(), newAddress);
		Assert.assertEquals(checkoutpage.getShippingAddressCityStateZip(), city+stateZip);
		Assert.assertEquals(checkoutpage.getShippingAddressCountry(), country);
		Assert.assertEquals(checkoutpage.getShippingMethod(), "Next Day Air");
		Assert.assertEquals(checkoutpage.getPaymentMethod(), "Check / Money Order");
		Assert.assertEquals(checkoutpage.getProductName(), productNameNew);
		Assert.assertEquals(checkoutpage.getQuantity(), "5");
		Assert.assertEquals(checkoutpage.getTotalPrice(), "$1,225.00");
		Assert.assertEquals(checkoutpage.getGiftWrapping(), "No");
		Assert.assertEquals(checkoutpage.getSubTotalPrice(), "$1,225.00");
		Assert.assertEquals(checkoutpage.getShippingPrice(), "$0.00");
		Assert.assertEquals(checkoutpage.getTotalPrice(), "$1,225.00");
		checkoutpage.clickToContinueButton("ConfirmOrder.save()");
		Assert.assertEquals(checkoutpage.getSuccessfulMessage(), "Your order has been successfully processed!");
		orderNumber=checkoutpage.getOrderNumber();
		homepage=checkoutpage.clickToContinueCompleteOrder();
		myaccountpage=(MyAccountObject) homepage.openPageAtHeaderByName(driver, "ico-account");
		orderpage=(OrderPageObject) myaccountpage.openPageAtMyAccountByName(driver, "customer-orders inactive");
		Assert.assertTrue(orderpage.getOrderNumber().contains(orderNumber));
		orderpage.clickToDetail("Order Number:"+orderNumber);
		Assert.assertTrue(orderpage.getOrderNumberInfor().contains(orderNumber));
		Assert.assertEquals(orderpage.getOrderTotalPrice(), "$1,225.00");
		Assert.assertEquals(orderpage.getBillingAddressName(), name);
		Assert.assertEquals(orderpage.getBillingAddressEmail(), registerpage.email);
		Assert.assertEquals(orderpage.getBillingAddressPhoneNumber(), phone);
		Assert.assertEquals(orderpage.getBillingAddressAddress1(), newAddress);
		Assert.assertEquals(orderpage.getBillingAddressCityStateZip(), city+stateZip);
		Assert.assertEquals(orderpage.getBillingAddressCountry(), country);
		Assert.assertEquals(orderpage.getShippingAdressName(), name);
		Assert.assertEquals(orderpage.getShippingEmail(), registerpage.email);
		Assert.assertEquals(orderpage.getShippingPhone(), phone);
		Assert.assertEquals(orderpage.getShippingAddressAddress1(), newAddress);
		Assert.assertEquals(orderpage.getShippingAddressCityStateZip(), city+stateZip);
		Assert.assertEquals(orderpage.getShippingAddressCountry(), country);
		Assert.assertEquals(orderpage.getShippingMethod(), " 2nd Day Air ");
		Assert.assertEquals(orderpage.getProductName(), productNameNew);
		Assert.assertEquals(orderpage.getQuantity(), "1");
		Assert.assertEquals(orderpage.getTotalPrice(), "$1,225.00");
		Assert.assertEquals(orderpage.getGiftWrapping(), "No");
		Assert.assertEquals(orderpage.getSubTotalPrice(), "$1,225.00");
		Assert.assertEquals(orderpage.getShippingPrice(), "$0.00");
		Assert.assertEquals(orderpage.getTotalPrice(), "$1,225.00");
	}
}
	